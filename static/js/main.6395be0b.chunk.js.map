{"version":3,"sources":["config.js","components/Nav.js","components/SearchButton.js","components/SearchForm.js","components/Header.js","components/GalleryItem.js","components/NoSearchResults.js","components/Gallery.js","components/ErrorPage.js","components/App.js","serviceWorker.js","index.js"],"names":["apiKey","Nav","react_default","a","createElement","className","NavLink","to","SearchButton","type","fill","height","viewBox","width","xmlns","d","SearchForm","state","searchText","onSearchChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","onSearch","history","push","concat","currentTarget","reset","onSubmit","this","name","placeholder","onChange","required","components_SearchButton","Component","withRouter","Header","components_SearchForm","components_Nav","GalleryItem","src","url","alt","NoSearchResults","Gallery","images","results","data","loading","title","length","map","image","farm","server","id","secret","components_GalleryItem","key","components_NoSearchResults","ErrorPage","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getDataOnLoad","errorMsg","axios","all","get","catch","error","console","log","then","spread","catRes","beachRes","guitarRes","catImages","photos","photo","beachImages","guitarImages","performSearch","query","searchLoading","response","searchImages","searchTitle","catTitle","beachTitle","guitarTitle","_this2","BrowserRouter","components_Header","Switch","Route","exact","path","render","components_Gallery","component","Boolean","window","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6395be0b.chunk.js","sourcesContent":["const apiKey = 'b4fd349fadfdfe9ed67ca23d7b91cb45';\n\n\nexport default apiKey;\n\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// The /search path loads on page load, and will keep the\n// images displayed until something else is searched for.\nconst Nav = () => {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li><NavLink to=\"/search\">Search</NavLink></li>\n        <li><NavLink to=\"/cats\">Cats</NavLink></li>\n        <li><NavLink to=\"/beaches\">Beaches</NavLink></li>\n        <li><NavLink to=\"/guitars\">Guitars</NavLink></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\n\n// Displayes from the SearchForm component.\nconst SearchButton = () => {\n  return (\n    <button type=\"submit\" className=\"search-button\">\n      <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      </svg>\n    </button>\n  )\n}\n\nexport default SearchButton;\n","import React, { Component } from 'react';\n// withRouter gives the component access the history.\nimport { withRouter } from 'react-router-dom';\nimport SearchButton from './SearchButton';\n\n\n// SearchForm displays even when the nav isn't clicked.\n// User can search no matter what nav is clicked on, and\n// it will switch to the search nav and /search path.\nclass SearchForm extends Component {\n  state = {\n    searchText: ''\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchText: e.target.value });\n  }\n\n  // Calls the axios request in App, and will route to /search/[searchtext].\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSearch(this.state.searchText);\n    this.props.history.push(`/search/${this.state.searchText}`);\n    e.currentTarget.reset();\n  }\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit} >\n        <input\n          type=\"search\"\n          name=\"search\" placeholder='Search...'\n          onChange={this.onSearchChange}\n          required />\n        <SearchButton />\n      </form>\n    )\n  }\n}\n\nexport default withRouter(SearchForm);\n","import React from 'react';\nimport Nav from './Nav';\nimport SearchForm from './SearchForm';\n\n// Header renders the title, search bar and nav links.\n// Rendered in App.\nconst Header = (props) => {\n  return (\n    <div>\n      <h1>Flickr Gallery</h1>\n      <SearchForm onSearch={props.onSearch} />\n      <Nav />\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\n// Gets the url from the Gallery component.\nconst GalleryItem = (props) => {\n  return (\n    <li>\n      <img src={props.url} alt=\"\" />\n    </li>\n  )\n}\n\nexport default GalleryItem;\n","import React from 'react';\n\n// Displays from the Gallery component.\nconst NoSearchResults = () => {\n  return (\n    <li className=\"not-found\">\n      <h3>No Results Found</h3>\n      <p>Your search did not return any results. Please try again.</p>\n    </li>\n  )\n}\n\nexport default NoSearchResults;\n","import React from 'react';\nimport GalleryItem from './GalleryItem';\nimport NoSearchResults from './NoSearchResults';\n\n// Iterates through the images and makes a url and GalleryItem out of them.\n// If no images are loaded, the NoSearchResults component will display.\nconst Gallery = (props) => {\n  const results = props.data;\n  let loading = props.loading;\n  let title = props.title;\n  let images;\n  let url;\n\n  if (results.length > 0) {\n    images = results.map((image) => {\n      url = `https://farm${image.farm}.staticflickr.com/${image.server}/${image.id}_${image.secret}.jpg`;\n\n      return <GalleryItem url={url} key={image.id} />\n    })\n  } else {\n    images = <NoSearchResults />\n  }\n\n  // 'Loading...' will display until the images are fully loaded,\n  // then will be replaced by the keyword.\n  return (\n    <div className=\"photo-container\">\n      {\n        (loading)\n          ? <h2>Loading...</h2>\n          :\n          <div>\n            <h2>{title}</h2>\n            <ul>{images}</ul>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default Gallery;\n","import React from 'react';\n\n// For when a bad url is entered.\nconst ErrorPage = () => {\n  return (\n    <div>\n      <h2>Whoops!</h2>\n      <p>Sorry, that url does not exist. Please try again.</p>\n    </div>\n  )\n}\n\nexport default ErrorPage;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport '../css/index.css';\nimport apiKey from '../config';\n\n// React-router-dom components.\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\n\n// App components.\nimport Header from './Header';\nimport Gallery from './Gallery';\nimport ErrorPage from './ErrorPage';\n\n\n// App handles state for all the images from Flickr.\n// Titles are passed through so it can display in Gallery.\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchImages: [],\n      catImages: [],\n      catTitle: 'cats',\n      beachImages: [],\n      beachTitle: 'beaches',\n      guitarImages: [],\n      guitarTitle: 'guitars',\n      searchTitle: '',\n      loading: true,\n      searchLoading: true\n    }\n  }\n\n  // getDataOnLoad only runs when the app is first loaded.\n  // It handles the initial fetching for the navlinks.\n  // performSearch runs with default 'sunsets' so either\n  // the search nav or the / path will show that when the page is loaded.\n  componentDidMount() {\n    this.getDataOnLoad();\n    this.performSearch('sunsets');\n  }\n\n  // loading state is set to true when these two axios requests first run,\n  // and then set to false when they're done. This is so 'Loading...' can display.\n  getDataOnLoad = () => {\n    this.setState({ loading: true });\n    let errorMsg = 'Error fetching and parsing data';\n    axios.all([\n      axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=cats&per_page=24&format=json&nojsoncallback=1`).catch(error => console.log(errorMsg, error)),\n      axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=beaches&per_page=24&format=json&nojsoncallback=1`).catch(error => console.log(errorMsg, error)),\n      axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=guitars&per_page=24&format=json&nojsoncallback=1`).catch(error => console.log(errorMsg, error))\n    ])\n      .then(axios.spread((catRes, beachRes, guitarRes) => {\n        this.setState({\n          catImages: catRes.data.photos.photo,\n          beachImages: beachRes.data.photos.photo,\n          guitarImages: guitarRes.data.photos.photo,\n          loading: false\n        });\n      })\n      )\n  }\n\n  performSearch = query => {\n    this.setState({ searchLoading: true });\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => {\n        this.setState({\n          searchImages: response.data.photos.photo,\n          searchLoading: false,\n          searchTitle: query\n        });\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });\n  }\n\n  // Each route is passed data, loading and title states to the Gallery component.\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <Header onSearch={this.performSearch} />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Gallery data={this.state.searchImages}\n              loading={this.state.loading} title={this.state.searchTitle} />} />\n            <Route path=\"/search\" render={() => <Gallery data={this.state.searchImages}\n              loading={this.state.searchLoading} title={this.state.searchTitle} />} />\n            <Route path=\"/cats\" render={() => <Gallery data={this.state.catImages}\n              loading={this.state.loading} title={this.state.catTitle} />} />\n            <Route path=\"/beaches\" render={() => <Gallery data={this.state.beachImages}\n              loading={this.state.loading} title={this.state.beachTitle} />} />\n            <Route path=\"/guitars\" render={() => <Gallery data={this.state.guitarImages}\n              loading={this.state.loading} title={this.state.guitarTitle} />} />\n            <Route component={ErrorPage} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}